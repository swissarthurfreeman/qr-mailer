package ch.hopitalrivierachablais.si.exploitation.mailer.rest;

import java.util.Properties;

import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import ch.hopitalrivierachablais.si.exploitation.mailer.domain.model.Ticket;
import org.springframework.beans.factory.annotation.Value;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;


@RestController
public class TicketController {

	@Value("${mailer.from.email}")
	private String fromEmail;

	@Value("${mailer.to.email}")
	private String toEmail;

	@Value("${mailer.host}")
	private String mailHost;

	@Value("${mailer.port}")
	private int mailPort;

	public JavaMailSender getJavaMailSender() {
		JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
		mailSender.setHost(mailHost);
		mailSender.setPort(mailPort);
		
		Properties props = mailSender.getJavaMailProperties();
		props.put("mail.transport.protocol", "smtp");
		//props.put("mail.smtp.auth", "true");
		//props.put("mail.smtp.starttls.enable", "true");
		//props.put("mail.debug", "true");
		
		return mailSender;
	}

	@GetMapping("/hello")
	public String hello() {
		return "hello";
	}

	@CrossOrigin
	@PostMapping("/new-ticket")
	public String createTicket(@RequestBody Ticket t) {
		System.out.println(t.toString());

		SimpleMailMessage m = new SimpleMailMessage();
		m.setFrom(fromEmail);
		m.setTo(toEmail);
		m.setSubject("Test");
		m.setText(t.toString());

		JavaMailSender sender = getJavaMailSender();
		sender.send(m);

		createTicketInAssetPlusWeb(t);

		return t.toString();
	}


	@Value("${mailer.assetUsername}")
	private String assetUsername;

	@Value("${mailer.assetPassword}")
	private String assetPassword;

	@Value("${mailer.assetURL}")
	private String assetURL;

	@Value("${webdriver.edge.driver}")
	private String edgeDriverPath;
	
	public void createTicketInAssetPlusWeb(Ticket t) {
		System.setProperty("webdriver.edge.driver", edgeDriverPath);

		EdgeOptions options = new EdgeOptions();
		WebDriver driver = new EdgeDriver(options);

		try {
			driver.get(assetURL);

			WebElement username = driver.findElement(By.id("signInUsername"));
			WebElement password = driver.findElement(By.id("signInPassword"));

			username.sendKeys(assetUsername);
			password.sendKeys(assetPassword);

			password.submit();

			Thread.sleep(1000);

			driver.get(assetURL + "/default.do");
			driver.findElement(By.className("shortcuts-box-tiles")).click();
			Thread.sleep(1000);

			WebElement equipmentId = driver.findElement(By.id("N_IMMA"));
			equipmentId.sendKeys("017-0009131");

			WebElement comment = driver.findElement(By.name("value(OBSERV)"));
			comment.sendKeys("TEST ROUE CASSÃ‰E");

			System.out.println("\n\n\nSleeping...\n\n\n");
			
			Thread.sleep(5000);

			
			WebElement save = driver.findElement(By.xpath("//a[@class='btn btn-icon btn-large' and @data-title='Enregistrer']"));
			save.click();
			System.out.println("\n\n\nSaving...\n\n\n");
			
			Thread.sleep(1000);

		} catch (Exception e) {
            e.printStackTrace();
			try {
				Thread.sleep(5000);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
        } finally {
            driver.quit();
        }
	}
}

